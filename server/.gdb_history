print result
break misc.c:58
run
print buf
print input[i]
c
print i
print buf
print input[i]
next
c
break hex_to_ascii
c
next
print c
print d
next
print high
print low
break main.c:54
run
print buf_out
break giveme_tcp_send_bytes
run
next
print amount
next
print res
next
print res
next
break giveme_tcp_send_packet
c
run
next
print res
next
c
next
print res
next
next
print res
c
break blockchain.c:438
run
break blockchain.c:438
run
print genesis_block
print genesis_block.hahsh
print genesis_block.has
print genesis_block.data.nounce
run
bt
thread 2
bt
c
run
thread 2
bt
break giveme_network_ip_connected
run
next
run
bt
run
download blockchain from peer
    handle SIGPIPE nostop noprint pass
break network.c:819
run
break     handle SIGPIPE nostop noprint pass
    handle SIGPIPE nostop noprint pass
run
break network.c:819
c
next
print end_hash
print total_blocks
next
c
break network.c:1084
run
c
c
c
c
next
print key
print *key
c
c
c
c
c
break giveme_blockchain_get_verifier_key 
run
c
c
c
c
next
next
print total_verifiers
next
print current_five_minute_block 
c
./gi
break     handle SIGPIPE nostop noprint pass
    handle SIGPIPE nostop noprint pass
break giveme_blockchain_get_verifier_key
run
next
print next_verifier_index 
print current_five_minute_block 
print current_five_minute_block  % total_verifiers-1
print total_verifiers 
break giveme_blockchain_get_verifier_key
run
    handle SIGPIPE nostop noprint pass
c
next
print total_verifiers 
next
print current_five_minute_block 
next
print next_verifier_index 
print current_five_minute_block % 1
print (current_five_minute_block+61) % 1
print (current_five_minute_block+61+61) % 1
print (current_five_minute_block+61+61+61) % 1
1 % (current_five_minute_block)
print 1 % (current_five_minute_block)
print 1 % (current_five_minute_block+61)
print 1 % (current_five_minute_block+61+61)
61 % 1
print 61 % 1
print (61+61) % 1
print (61+61+61) % 1
print (61*2000) % 1
print (60*2000) % 1
print (60*200000) % 1
print (61*2000) % 1
print (61*2000) % 2
print (61*2001) % 2
print (61*2002) % 2
print (61*2003) % 2
print (61*2003) % 5
print (61*2004) % 5
print (61*2005) % 5
print (61*2006) % 5
print (61*1) % 5
print (61*2) % 5
print (61*3) % 5
print (61*3) % 5
print (61*0) % 5
print (61*1) % 5
print (61*4) % 5
print (61*9) % 5
print (61*10) % 5
print (61*11) % 5
print (61*11) % 2
break giveme_blockchain_get_verifier_key 
rrun
run
    handle SIGPIPE nostop noprint pass
c
next
print total_verifiers 
print total_blocks
next
print next_verifier_index 
next
print key
print *key
next
print *giveme_public_key()
c
    handle SIGPIPE nostop noprint pass
break blockchain.c:68
c
run
print next_verifier_index 
print blockchain.public_keys
print *(struct key*)(vector_at(blockchain.public_keys))
print *(struct key*)(vector_at(blockchain.public_keys), next_verifier_index))
print *(struct key*)(vector_at(blockchain.public_keys), next_verifier_index)
print *(struct key*)(vector_at(blockchain.public_keys, next_verifier_index))
print *(struct key*)(vector_at(blockchain.public_keys, next_verifier_index+1))
print *(struct key*)(vector_at(blockchain.public_keys, next_verifier_index-1))
print *(struct key*)(vector_at(blockchain.public_keys, next_verifier_index+1))
print *(struct key*)(vector_at(blockchain.public_keys, next_verifier_index))
next
print *(struct key*)(vector_at(blockchain.public_keys, 0))
print *(struct key*)(vector_at(blockchain.public_keys, 1))
c
print next_verifier_index 
vector_at(blockchain.public_keys, next_verifier_index);
print vector_at(blockchain.public_keys, next_verifier_index);
print vector_at(blockchain.public_keys, next_verifier_index)
print *(struct key*)vector_at(blockchain.public_keys, next_verifier_index)
c
print *(struct key*)vector_at(blockchain.public_keys, next_verifier_index)
print next_verifier_index 
c
print next_verifier_index 
print total_blocks
print total_blocks $ total_verifiers
print total_blocks % total_verifiers
print total_verifiers 
print total_blocks % total_verifiers
print (total_blocks+1) % total_verifiers
print (total_blocks+1) % total_verifiers
print (total_blocks+2) % total_verifiers
c
print next_verifier_index 
print total_blocks
c
break giveme_blockchain_load_data
run
next
step
next
print key
print *key
print published_key->pub
print published_key->pub_key
print *published_key
print *published_key
next
break blockchain.c:397
c
run
print punlished_key->pub
print published_key 
print *published_key 
print key
print *key
break blockchain_handle_added
break giveme_blockchain_handle_added_block
c
break giveme_load_public_key
run
bt
run
bt
break giveme_network_create_known_last_hash
run
next
print hash
bt
break network.c:798
run
print peer_hash
print network.connections[i]
print network.connections[i].data
print network.connections[i].data
